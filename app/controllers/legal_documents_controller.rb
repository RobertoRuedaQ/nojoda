class LegalDocumentsController < ApplicationController
	include LumniMigration

	def index
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company)).where(company_id: current_company.id)
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@legal_document,legalDocumentResult)
	end

	def new
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		@legal_document.company_id = current_company.id
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@legal_document,legalDocumentResult)
	end

	def create
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@legal_document,legalDocumentResult)
	end

	def edit
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@legal_document,legalDocumentResult)
	end

	def update
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@legal_document,legalDocumentResult)
	end
	def destroy
		@legal_document = LegalDocument.lumniStart(params,current_company, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		legalDocumentResult = @legal_document.lumniSave(params,current_user, list: current_user.template('LegalDocument','legal_documents',current_user,current_company: current_company))
		lumniClose(@cluster,legalDocumentResult)
	end
	def eligibility_criteria
		@funding_opportunity = FundingOpportunity.cached_find(params[:id])
		@legal_document = @funding_opportunity.eligibility_criteria
	end


	def preview
		@legal_document = LegalDocument.cached_find(params[:id])
	    respond_to do |format|
	      format.pdf do
	        render(
        		pdf: '/legal_documents/preview',
        		layout: 'pdf.html',
        		page_size: 'letter',
        		margin:  {  
        			top:               20,
              bottom:            20,
              left:              20,
              right:             20 
           	}
          )
	      end
	    end		
	end

	def send_preview
		CommunicationMailer.send_preview( params[:id],params[:temp][:email]).deliver
	end



	# def export_bff_disclosures
	# 	current_files = Dir.glob("temp_files/pdf/*")
	# 	client = Restforce.new
	# 	fields = ["Name","CreatedDate","Name","BFF_Disclosure__r.Name","BFF_Disclosure_Question__c","BFF_Disclosure_Account__r.Name","BFF_Disclosure_Body__c"]
	# 	disclosures = lumni_import 'BFF_Student_Disclosure__c', fields: fields

	# 	disclosures.each do |disclosure|
	# 		file_name = "#{disclosure["Name"]}-#{disclosure["BFF_Disclosure_Account__r"]['Name']}-#{disclosure["CreatedDate"]}.pdf".gsub( '/', '_')
	# 		puts file_name
	# 		if current_files.index(File.join 'temp_files','pdf', file_name).nil?
	# 			disclosure_body = disclosure["BFF_Disclosure_Body__c"].to_s.gsub('height: 460px', 'height: 750px')
	# 			pdf = WickedPdf.new.pdf_from_string(
	# 			  render_to_string(
	# 			  	inline: disclosure_body,
	# 	    		layout: 'pdf.html'
	# 			  	),
	# 			page_size: 'letter',
	# 			margin:  {  top:               20,
	# 		                bottom:            30,
	# 		                left:              20,
	# 		                right:             20 },
	# 		    footer: {
	# 			    content: render_to_string(
	# 			  		inline:"<small>This document was signed by #{disclosure["BFF_Disclosure_Account__r"]["Name"]} at #{disclosure["CreatedDate"]}. This pdf file was automatically generated by Lumni Servicing Platform.</small>",
	# 			  		layout: 'pdf.html'
	# 			  	)
	# 			  }		  
	# 			)
	# 			save_path = File.join Rails.root,'temp_files','pdf',file_name
	# 			File.open(save_path, 'wb') do |file|
	# 			  file << pdf
	# 			end
	# 		end
	# 	end



	# end
end
